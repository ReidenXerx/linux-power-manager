#!/bin/bash

# Intel WiFi Power Optimization Script
# Reduces power spikes and optimizes power consumption for Intel WiFi adapters
# Version: 1.0

VERSION="1.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODPROBE_CONF="/etc/modprobe.d/iwlwifi-power.conf"
NETWORKMANAGER_CONF="/etc/NetworkManager/conf.d/wifi-power.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log() { echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
info() { echo -e "${CYAN}[INFO]${NC} $1"; }

# Check if running Intel WiFi
check_intel_wifi() {
    if ! lspci | grep -i "intel.*network\|intel.*wifi\|intel.*wi-fi" > /dev/null; then
        error "No Intel WiFi adapter detected. This script is designed for Intel adapters."
        exit 1
    fi
    
    if ! lsmod | grep iwlwifi > /dev/null; then
        error "Intel iwlwifi driver not loaded. This script requires iwlwifi driver."
        exit 1
    fi
    
    local wifi_device=$(lspci | grep -i "intel.*network\|intel.*wifi")
    info "Detected Intel WiFi: $wifi_device"
}

# Get WiFi interface name
get_wifi_interface() {
    local interface=$(ip link show | grep -E "wl|wlan" | cut -d: -f2 | tr -d ' ' | head -1)
    if [ -z "$interface" ]; then
        error "No WiFi interface found"
        exit 1
    fi
    echo "$interface"
}

# Apply kernel module parameters
apply_modprobe_optimizations() {
    log "Applying iwlwifi kernel module optimizations..."
    
    # Backup existing file if it exists
    if [ -f "$MODPROBE_CONF" ]; then
        sudo cp "$MODPROBE_CONF" "${MODPROBE_CONF}.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Create optimized modprobe configuration
    sudo tee "$MODPROBE_CONF" > /dev/null << 'EOF'
# Intel WiFi Power Optimization
# Generated by wifi-intel-optimizer.sh

# Power saving optimizations
options iwlwifi power_save=1
options iwlwifi power_level=3
options iwlwifi amsdu_size=3
options iwlwifi uapsd_disable=0
options iwlwifi bt_coex_active=1

# Reduce power spikes
options iwlwifi led_mode=1
options iwlwifi swcrypto=0
options iwlwifi fw_restart=1

# Keep modern WiFi features for efficiency
options iwlwifi disable_11ax=0
options iwlwifi disable_11be=0
EOF
    
    success "iwlwifi module parameters configured"
    warning "Reboot or reload iwlwifi module for full effect"
}

# Apply NetworkManager optimizations
apply_networkmanager_optimizations() {
    log "Applying NetworkManager WiFi optimizations..."
    
    sudo mkdir -p "$(dirname "$NETWORKMANAGER_CONF")"
    
    # Create NetworkManager WiFi power configuration
    sudo tee "$NETWORKMANAGER_CONF" > /dev/null << 'EOF'
# WiFi Power Management Optimizations
# Generated by wifi-intel-optimizer.sh

[device]
# Reduce random MAC scanning (saves power)
wifi.scan-rand-mac-address=no

# Disable aggressive background scanning
wifi.background-scan=no

[connection]
# Increase scan interval to reduce power spikes (5 minutes)
wifi.background-scan-interval=300

# Enable power saving for connections
wifi.powersave=2
EOF
    
    success "NetworkManager WiFi optimizations configured"
    info "Restart NetworkManager: sudo systemctl restart NetworkManager"
}

# Apply runtime optimizations
apply_runtime_optimizations() {
    local interface="$1"
    
    log "Applying runtime WiFi power optimizations..."
    
    # Enable power saving on interface
    if command -v iw >/dev/null 2>&1; then
        sudo iw dev "$interface" set power_save on
        success "WiFi power save enabled on $interface"
    else
        warning "iw command not found, skipping interface power save"
    fi
    
    # Apply iwlwifi-specific runtime parameters
    if [ -w /sys/module/iwlwifi/parameters/power_level ]; then
        echo 3 | sudo tee /sys/module/iwlwifi/parameters/power_level > /dev/null
        success "iwlwifi power level set to 3 (balanced)"
    fi
    
    if [ -w /sys/module/iwlwifi/parameters/power_save ]; then
        echo Y | sudo tee /sys/module/iwlwifi/parameters/power_save > /dev/null
        success "iwlwifi power save enabled"
    fi
}

# Show current WiFi power status
show_wifi_power_status() {
    local interface="$1"
    
    echo -e "${CYAN}📡 Current WiFi Power Status${NC}"
    echo "================================"
    
    # Interface power save status
    if command -v iw >/dev/null 2>&1 && [ -n "$interface" ]; then
        local power_save=$(iw dev "$interface" get power_save 2>/dev/null || echo "unknown")
        echo "Interface ($interface): $power_save"
    fi
    
    # iwlwifi module parameters
    echo ""
    echo "iwlwifi Module Parameters:"
    if [ -r /sys/module/iwlwifi/parameters/power_save ]; then
        echo "  power_save: $(cat /sys/module/iwlwifi/parameters/power_save)"
    fi
    if [ -r /sys/module/iwlwifi/parameters/power_level ]; then
        echo "  power_level: $(cat /sys/module/iwlwifi/parameters/power_level)"
    fi
    if [ -r /sys/module/iwlwifi/parameters/uapsd_disable ]; then
        echo "  uapsd_disable: $(cat /sys/module/iwlwifi/parameters/uapsd_disable)"
    fi
    if [ -r /sys/module/iwlwifi/parameters/bt_coex_active ]; then
        echo "  bt_coex_active: $(cat /sys/module/iwlwifi/parameters/bt_coex_active)"
    fi
    
    # Configuration files
    echo ""
    echo "Configuration Files:"
    echo "  modprobe.d: $([ -f "$MODPROBE_CONF" ] && echo "✅ Present" || echo "❌ Not configured")"
    echo "  NetworkManager: $([ -f "$NETWORKMANAGER_CONF" ] && echo "✅ Present" || echo "❌ Not configured")"
}

# Test power levels
test_power_levels() {
    local interface="$1"
    
    echo -e "${CYAN}🧪 Testing WiFi Power Levels${NC}"
    echo "============================="
    echo "This will test different power levels. Monitor your power usage."
    echo "Power levels: 0=performance, 1-2=balanced, 3-5=power saving"
    echo ""
    
    for level in 1 2 3 4 5; do
        echo -n "Testing power level $level... "
        echo $level | sudo tee /sys/module/iwlwifi/parameters/power_level > /dev/null
        sleep 2
        echo "Applied"
    done
    
    echo ""
    echo "Test complete. Current power level: $(cat /sys/module/iwlwifi/parameters/power_level 2>/dev/null || echo 'unknown')"
    echo "Monitor power consumption with: sudo powertop"
}

# Show usage
show_usage() {
    echo -e "${CYAN}Intel WiFi Power Optimizer v$VERSION${NC}"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  optimize      - Apply all optimizations (recommended)"
    echo "  modprobe      - Apply kernel module optimizations only"
    echo "  networkmanager - Apply NetworkManager optimizations only"
    echo "  runtime       - Apply runtime optimizations only"
    echo "  status        - Show current WiFi power status"
    echo "  test          - Test different power levels"
    echo "  help          - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 optimize        # Apply all optimizations"
    echo "  $0 status          # Check current settings"
    echo "  $0 test            # Test power levels"
}

# Main function
main() {
    case "$1" in
        "optimize")
            check_intel_wifi
            interface=$(get_wifi_interface)
            apply_modprobe_optimizations
            apply_networkmanager_optimizations
            apply_runtime_optimizations "$interface"
            echo ""
            success "Intel WiFi power optimizations applied!"
            warning "For full effect, restart NetworkManager and/or reboot"
            ;;
        "modprobe")
            check_intel_wifi
            apply_modprobe_optimizations
            ;;
        "networkmanager")
            apply_networkmanager_optimizations
            ;;
        "runtime")
            check_intel_wifi
            interface=$(get_wifi_interface)
            apply_runtime_optimizations "$interface"
            ;;
        "status")
            check_intel_wifi
            interface=$(get_wifi_interface)
            show_wifi_power_status "$interface"
            ;;
        "test")
            check_intel_wifi
            interface=$(get_wifi_interface)
            test_power_levels "$interface"
            ;;
        "help"|"-h"|"--help"|"")
            show_usage
            ;;
        *)
            error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
